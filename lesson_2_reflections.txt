What happens when you initialize a repository? Why do you need to do it?
Initializing a repository identifies the files in the directory to Git; however, you need to indicate which files will be included in the intial commit.  The initialization creates a starting point for tracking changes (ground zero).

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is like a work area where you can make changes without committing them.  When you are ready to actually save the changes of a logical grouping into a commit, you can then add the commit to the repository.  The working directory contains all the files in the directory--even those files that are not necessarily grouped into the commit.

How can you use the staging area to make sure you have one commit per logical change?
Using git diff to compare the staging area to the working directory and git diff  --staged to compare the staging area to the latest commit can help identify the changes that are in the staging area waiting to be committed.  


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful for trying out new ideas or doing a/b testing.  You can make major design direction changes to try something, but can easily revert to the master if the new design doesn't work.  Then you can create a new branch to start a new clean design without having to undo the previous changes.

How do the diagrams help you visualize the branch structure? By clearing showing parent relationships, you can trace back revisions to clearly delineate branches.  Diagrams also help identify reachabililty issues of "orphan" commits outside the named branch structure.  I think diagrams would also be helpful for deciding where/when to merge branches to the master.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When you merge two branches, the merged branch becomes part of the other branch.  While the individual commits are still accessible along the two branches, if you do a git log from the merged commit, you will trace back through the commints in a time-stamped order (across both branches).  Therefore, the diagram joins the two branches into one merged commit node, and the merge commit has two parent nodes (one on each of the merged branches).


